--!:Name
--Lil' Jumpy
--!:Author
--Howf

-- Constants ==========================
levels={
	{{33,0},{10,74},{35,0},{3,74},{2,0},{3,74},{2,0},{3,74},{18,0},{2,74},{50,0},{10,74},{35,0},{3,74},{2,0},{3,74},{2,0},{3,74},{18,0},{2,74},{50,0},{10,74},{35,0},{3,74},{2,0},{3,74},{2,0},{3,74},{18,0},{2,74},{50,0},{10,74},{34,0},{1,72},{3,74},{1,72},{1,0},{3,74},{1,0},{1,72},{3,74},{1,72},{17,0},{2,74},{50,0},{10,74},{33,0},{2,64},{3,66},{2,64},{3,66},{2,64},{3,66},{2,64},{16,0},{2,74},{50,0},{10,74},{33,0},{2,73},{3,74},{2,73},{3,74},{2,73},{3,74},{2,73},{16,0},{2,74},{50,0},{10,74},{33,0},{2,73},{3,74},{2,73},{3,74},{2,73},{3,74},{2,73},{16,0},{2,74},{50,0},{10,74},{33,0},{2,73},{3,74},{2,73},{3,74},{2,73},{3,74},{2,73},{16,0},{2,74},{50,0},{10,74},{33,0},{2,73},{3,74},{2,73},{3,74},{2,73},{3,74},{2,73},{16,0},{2,74},{46,0},{1,72},{1,0},{2,72},{2,74},{1,72},{4,74},{1,72},{2,74},{1,72},{1,0},{1,72},{1,0},{1,72},{28,0},{2,73},{3,74},{2,73},{3,74},{2,73},{3,74},{2,73},{12,0},{2,72},{2,0},{2,74},{45,0},{5,64},{2,74},{2,64},{2,74},{2,64},{2,74},{6,64},{1,72},{11,0},{1,72},{1,0},{1,72},{4,0},{1,72},{1,0},{1,72},{3,0},{3,72},{1,73},{3,74},{1,73},{1,72},{3,74},{1,72},{1,73},{3,74},{1,73},{2,72},{11,0},{3,64},{1,0},{2,74},{40,0},{1,72},{4,0},{5,65},{2,74},{2,73},{2,74},{2,73},{2,74},{6,65},{1,64},{11,0},{4,64},{3,66},{3,64},{3,66},{4,64},{3,74},{2,64},{3,74},{2,64},{3,74},{3,64},{9,0},{1,72},{1,64},{3,65},{1,0},{2,74},{17,0},{1,72},{2,0},{1,72},{1,0},{1,16},{1,0},{2,72},{1,0},{1,72},{3,0},{2,72},{4,0},{1,72},{3,64},{2,72},{1,0},{1,72},{5,65},{2,74},{2,73},{2,74},{2,73},{2,74},{7,65},{1,64},{2,72},{3,0},{1,72},{4,0},{4,65},{3,0},{3,65},{3,0},{4,65},{3,74},{2,65},{3,74},{2,65},{3,74},{3,65},{1,72},{2,0},{2,72},{2,0},{1,72},{1,0},{1,64},{4,65},{1,0},{2,74},{1,0},{1,72},{1,0},{2,72},{2,0},{1,72},{1,26},{1,0},{1,72},{2,0},{1,72},{1,0},{2,72},{21,64},{3,65},{4,64},{5,65},{2,74},{2,73},{2,74},{2,73},{2,74},{8,65},{6,64},{4,0},{4,65},{3,0},{3,65},{3,0},{4,65},{3,74},{2,65},{3,74},{2,65},{3,74},{3,65},{9,64},{5,65},{1,0},{2,74},{1,0},{16,64},{33,65},{2,74},{2,73},{2,74},{2,73},{2,74},{14,65},{4,0},{4,65},{3,0},{3,65},{3,0},{4,65},{3,74},{2,65},{3,74},{2,65},{3,74},{17,65},{1,0},{2,74},{1,0},{49,65},{2,74},{2,73},{2,74},{2,73},{2,74},{14,65},{4,0},{4,65},{3,0},{3,65},{3,0},{4,65},{3,74},{2,65},{3,74},{2,65},{3,74},{17,65},{1,0},{2,74},{1,0},{16,65}},{{2048,0}},{{2048,0}},{{2048,0}},
	}
	colors={
	{{33,0},{10,219},{35,0},{3,219},{2,0},{3,219},{2,0},{3,219},{18,0},{2,219},{50,0},{10,219},{35,0},{3,219},{2,0},{3,219},{2,0},{3,219},{18,0},{2,219},{50,0},{10,219},{35,0},{3,219},{2,0},{3,219},{2,0},{3,219},{18,0},{2,219},{27,0},{1,112},{22,0},{10,219},{34,0},{1,139},{3,219},{1,139},{1,0},{3,219},{1,0},{1,139},{3,219},{1,139},{17,0},{2,219},{50,0},{10,219},{33,0},{2,131},{3,59},{2,131},{3,59},{2,131},{3,59},{2,131},{1,83},{15,0},{2,219},{50,0},{10,219},{33,0},{2,50},{3,219},{2,50},{3,219},{2,50},{3,219},{2,50},{16,0},{2,219},{23,0},{1,112},{26,0},{10,219},{33,0},{2,50},{3,219},{2,50},{3,219},{2,50},{3,219},{2,50},{1,83},{15,0},{2,219},{22,0},{1,112},{3,0},{2,112},{1,0},{1,112},{20,0},{10,219},{33,0},{2,50},{3,219},{2,50},{3,219},{2,50},{3,219},{2,50},{1,83},{15,0},{2,219},{22,0},{2,112},{26,0},{10,219},{33,0},{2,50},{3,219},{2,50},{3,219},{2,50},{3,219},{2,50},{12,0},{1,139},{3,0},{2,219},{45,0},{5,139},{2,219},{1,139},{4,219},{1,139},{2,219},{9,139},{24,0},{2,50},{3,219},{2,50},{3,219},{2,50},{3,219},{2,50},{10,0},{6,139},{2,219},{44,0},{6,131},{2,219},{2,131},{2,219},{2,131},{2,219},{6,131},{2,139},{10,0},{11,139},{2,0},{2,139},{1,130},{1,50},{3,219},{1,50},{1,130},{3,219},{1,130},{1,50},{3,219},{1,50},{1,130},{3,139},{7,0},{1,139},{1,0},{3,131},{1,0},{2,219},{39,0},{4,139},{1,0},{1,139},{5,83},{2,219},{2,186},{2,219},{2,186},{2,219},{6,83},{1,131},{3,139},{8,0},{4,131},{3,59},{3,131},{3,59},{4,131},{3,219},{2,131},{3,219},{2,131},{3,219},{3,131},{1,0},{1,139},{7,0},{1,139},{1,131},{3,83},{1,0},{2,219},{17,0},{18,139},{2,0},{1,139},{3,131},{4,139},{5,83},{2,219},{2,186},{2,219},{2,186},{2,219},{7,83},{1,131},{7,139},{3,0},{4,83},{3,0},{3,83},{3,0},{4,83},{3,219},{2,83},{3,219},{2,83},{3,219},{3,83},{8,139},{1,0},{1,131},{4,83},{1,0},{2,219},{1,0},{7,139},{1,235},{8,139},{21,131},{3,83},{4,131},{5,83},{2,219},{2,186},{2,219},{2,186},{2,219},{8,83},{6,131},{4,0},{4,83},{3,0},{3,83},{3,0},{4,83},{3,219},{2,83},{3,219},{2,83},{3,219},{3,83},{9,131},{5,83},{1,0},{2,219},{1,0},{16,131},{33,83},{2,219},{2,186},{2,219},{2,186},{2,219},{14,83},{4,0},{4,83},{3,0},{3,83},{3,0},{4,83},{3,219},{2,83},{3,219},{2,83},{3,219},{17,83},{1,0},{2,219},{1,0},{49,83},{2,219},{2,186},{2,219},{2,186},{2,219},{14,83},{4,0},{4,83},{3,0},{3,83},{3,0},{4,83},{3,219},{2,83},{3,219},{2,83},{3,219},{17,83},{1,0},{2,219},{1,0},{16,83}},{{40,0},{1,176},{44,0},{1,169},{1,0},{1,83},{1960,0}},{{2048,0}},{{2048,0}},
	}
WHITE = 13

-- Globals ============================
screenshake = 0
bg_col = 11
ticks = 0

-- Main ===============================
function boot()
	clrs(" ", 14, bg_col)
	load_level(1)
end

function tick()
	ticks = ticks + 1
	last_cam_x = camera_x
	update()
	draw()
end

-- Update =============================
function update()

	-- Animation
	scroll_y(74, 1)
	if ticks % 5 == 0 then
		scroll_x(88, 7)
	end

	-- Objects
	for i,obj in pairs(objects) do
		if obj.update then obj.update(obj) end
	end

	-- Screenshake
	screenshake = appr(screenshake, 0, 1)
	if screenshake > 0 then pan(sgn(1-rnd()*2), sgn(1-rnd()*2))
	else pan(0, 0) end
end

function camera(x)
	if level_complete then x = 896 end
	local dx = x - camera_x
	camera_x = x

	-- Parallax
	parallax_x = parallax_x - dx*0.2
	if abs(parallax_x) >= 1 then
		local ox = parallax_x < 0 and 15 or 1
		scroll_x(89, ox, 2)
		scroll_x(91, ox, 2)
		scroll_x(93, ox, 2)
		parallax_x = appr(parallax_x, 0, 1)
	end
end

-- Draw ===============================
function draw()
	clrs(" ", 0, bg_col)
	map()

	-- Objects
	sort(objects, function(a,b) return a.layer < b.layer end)
	for i,obj in pairs(objects) do
		if obj.draw then obj.draw(obj) end
	end
end

function map()
	local mtn_col = 11

	-- background
	rect(0,8,16,1,		88, WHITE, bg_col)
	for x = 0,15,2 do
		tile(x, 5, 		89, WHITE, bg_col)
		tile(x+1, 5, 	90, WHITE, bg_col)
		tile(x, 6, 		91, bg_col, WHITE)
		tile(x+1, 6, 	92, bg_col, WHITE)
		tile(x, 7, 		93, bg_col, 10)
		tile(x+1, 7, 	94, bg_col, 10)
	end

	-- level
	local left = flr(camera_x/8)
	for x = left,left+15 do
	for y = 0,15 do
		local t = tilemap_get(x, y)
		if t ~= 0 then
			local i = inkmap[x + y*128]
			tile(x-left, y, t, i[1], i[2])
		end
	end end
end

-- Classes ============================
classes = {}
function new_class(...)
	local class = {id=#classes}
	for i,v in pairs({...}) do
		classes[v] = class
	end
	return class
end

-- Player =============================
deadplayer = new_class()
function deadplayer:update()
	self.spd_y = appr(self.spd_y,6,0.3)
	if self.y > 128 and self.spd_y>0 then
		load_level(level_id)
	end
	self.y = self.y + self.spd_y
end
function deadplayer:draw()
	sprite(8, self.x, self.y, 1, 15)
end

player = new_class(16)
function player:init()
	self.spr = 0
	self.layer = 1
end

function player:update()
	local ox = int_btn(1) - int_btn(0)
	local oy = int_btn(3) - int_btn(2)
	local on_ground = self.check_solid(0, 1)
	local wants_jump = btn(4) and not self.btn_jump
	self.btn_jump = btn(4)

	-- Death
	if self.y > 128 then
		self.destroy()
		screenshake = 10
		new_object(deadplayer, self.x, self.y).spd_y = -4
	end

	-- Movement
	local move_spd = 2
	self.spd_x = appr(self.spd_x, ox*move_spd, 0.3)
	self.flip_x = ox == 0 and self.flip_x or ox < 0

	-- Gravity
	local maxfall = 6
	local grav_rise,grav_fall = 0.3, 0.4
	if not on_ground then
		self.spd_y = appr(self.spd_y, maxfall, self.spd_y>0 and grav_fall or grav_rise)
	end

	-- Jumping
	if on_ground and wants_jump then
		self.spd_y = -4
	end

	-- Collisions
	self.move_and_collide()

	-- Clamp pos
	local clamp_x = mid(self.x, camera_x, camera_x+120)
	if self.x ~= clamp_x then
		self.x = clamp_x
		self.spd_x = 0
		self.rem_x = 0
	end

	-- Animation
	self.spr = not on_ground and 2 or -- midair
	self.spd_x ~= 0 and (self.spr + 0.25) % 2 or 0 -- walking/idle
	camera(mid(self.x-56, 0, 896))
end

function player:draw()
	sprite(self.spr, self.x, self.y, 1, 15, self.flip_x, self.flip_y)
end

-- Moth ===============================

-- Rock Spawner =======================
rock_spawner = new_class(20)
function rock_spawner:update()
	if ticks%60 == 0 then
		new_object(rock, self.x, self.y)
	end
end

-- Rock ===============================
rock = new_class()
function rock:update()
	self.spd_y = appr(self.spd_y, 6, 0.3)
	if self.check_solid(0,0) then
		self.destroy()
	end
	self.y = self.y + self.spd_y
end
function rock:draw()
	sprite(4, self.x, self.y, 5, 4)
end

-- Pebble =============================
pebble = new_class()
function pebble:update()
end

function pebble:draw()
end

-- Star ===============================
complete_star = new_class()
function complete_star:init()
	self.target_y = 28
	self.timer = 0
	level_complete = true
end
function complete_star:update()
	self.y = self.y + (self.target_y - self.y)*0.1
	self.timer = appr(self.timer, 200, 1)

	if self.timer == 100 or self.timer == 130 then
		screenshake = 5
	end
end
function complete_star:draw()
	local oy = self.y + sin(ticks/15)*2
	sprite(66 + sin(ticks/10)*2, self.x, oy, 8, WHITE)
	sprite(66 + sin(ticks/10)*2, self.x+8, oy, 123, WHITE, true)

	-- Text
	if self.timer >= 100 then text(1,2,"level",13) end
	if self.timer >= 130 then text(6,2," complete",13) end
end

-- Chest ==============================
chest = new_class(26)
function chest:init()
	self.y = self.y + 1
	self.hitbox = Rect(0,0,16,8)
end
function chest:update()
	local hit = self.check(player,0,0)
	if not self.open and hit and hit.check_solid(0,1) then
		new_object(complete_star, self.x, self.y)
		self.open = true
	end
end
function chest:draw()
	local tx,ty = flr((self.x - camera_x)/8),flr(self.y/8)

	-- Bottom
	tile(tx, ty, 26, 3, 14)
	tile(tx+1, ty, 27, 3, 14)

	-- Top
	local top = self.open and 30 or 28
	local fg,bg = self.open and 14 or bg_col, self.open and 3 or 14
	tile(tx, ty-1, top, fg, bg)
	tile(tx+1, ty-1, top+1, fg, bg)
end

-- Objects ============================
objects = {}
function new_object(_class,x,y)

	-- Variables ==============
	local obj = {
		x=x, y=y, xstart=x, ystart=y,
		spd_x=0, spd_y=0,
		rem_x=0, rem_y=0,
		hitbox=Rect(0,0,8,8),
		layer=0,
	}
	setmeta(obj, {__index = _class})

	-- Methods ================
	function obj.destroy() del(objects, obj) end

	function obj.left(ox) return obj.x + obj.hitbox.x + (ox or 0) end
	function obj.right(ox) return obj.left(ox) + obj.hitbox.w-1 end

	function obj.top(oy) return obj.y + obj.hitbox.y + (oy or 0) end
	function obj.bottom(oy) return obj.top(oy) + obj.hitbox.h-1 end
	
	-- Collisions =============
	function obj.check(class,ox,oy)
		for i,other in ipairs(objects) do
			if other ~= obj and other.id == class.id and obj.touching(other,ox,oy) then
				return other
			end
		end
	end

	function obj.touching(other,ox,oy)
		return other.right() >= obj.left(ox)
		and other.bottom() >= obj.top(oy)
		and other.left() <= obj.right(ox)
		and other.top() <= obj.bottom(oy)
	end

	function obj.check_solid(ox,oy)

		-- semisolid tiles
		if oy>=0 and obj.get_tile(0,oy,66) and not obj.get_tile(0,0,66) then
			return true
		end

		-- solid tiles
		return obj.get_tile(ox,oy,{64,65})
	end

	function obj.get_tile(ox,oy,t)
		if type(t)~="table" then t = {t} end
		for xx = flr(obj.left(ox)/8), (obj.right(ox))/8 do
		for yy = flr(obj.top(oy)/8), (obj.bottom(oy))/8 do
			for i,v in pairs(t) do
				if tilemap_get(xx,yy) == v then return true end
			end
		end end
	end

	-- Movement ===============
	function obj.move_and_collide()
		obj.rem_x = obj.rem_x + obj.spd_x
		obj.rem_y = obj.rem_y + obj.spd_y
		local amount_x = round(obj.rem_x)
		local amount_y = round(obj.rem_y)
		obj.rem_x = obj.rem_x - amount_x
		obj.rem_y = obj.rem_y - amount_y

		-- Horizontal
		local step_x = sign(amount_x)
		for i = 1,abs(amount_x) do
			if obj.check_solid(step_x, 0) then
				obj.spd_x = 0
				break
			else obj.x = obj.x + step_x end
		end

		-- Vertical
		local step_y = sign(amount_y)
		for i = 1,abs(amount_y) do
			if obj.check_solid(0, step_y) then
				obj.spd_y = 0
				break
			else obj.y = obj.y + step_y end
		end
	end

	-- Return =================
	if obj.init then obj:init(_ENV) end
	insert(objects, obj)
	return obj
end

-- Levels =============================
function load_level(level)
	level_id=level
	objects,tilemap,inkmap = {},{},{}

	camera_x,parallax_x,last_cam_x = 0,0,0
	offset_x,camera_tx = 0,0

	-- Tilemap
	local pos,data = 0,levels[level_id]
	for i,v in pairs(data) do
		for ii = 1,v[1] do
			if classes[v[2]] then
				new_object(classes[v[2]], (pos%128)*8, flr(pos/128)*8-1)
				tilemap[pos] = 32
			else tilemap[pos] = v[2] end
			pos = pos + 1
		end
	end

	-- Inkmap
	pos,data = 0,colors[level_id]
	for i,v in pairs(data) do
		for ii = 1,v[1] do
			inkmap[pos] = { flr(v[2]/16), v[2]%16 }
			pos = pos + 1
		end
	end
end

-- Helpers ============================
function sprite(index,x,y,chr,fg,flip_x,flip_y,bg)
	if x > camera_x+128 or x < camera_x-8 then return end

	x = x - camera_x
	x,y,index = flr(x), flr(y-1), flr(index)

	local offset = (16 + index)*8
	local tx,ty = flr(x / 8), flr(y / 8)

	-- Render tiles
	local ox,oy = x%8, -(y+1)%8
	local cam = chr * 8

	-- Clear
	for i = 0,15 do
		poke(cam+i, 0)
		poke(cam+i+16, 0)
	end

	-- Render background
	-- for i = 0,7 do
	-- 	poke(cam+i, 	peek(mget(tx, ty)*8 + i))
	-- 	poke(cam+i+8, 	peek(mget(tx+1, ty)*8 + i))
	-- 	poke(cam+i+16, 	peek(mget(tx, ty+1)*8 + i))
	-- 	poke(cam+i+24, 	peek(mget(tx+1, ty+1)*8 + i))
	-- end

	-- Render sprite
	for i = 0,7 do
		local val = peek(offset + (flip_x and 8-i%8-1 or i%8))
		local wrapped = val/2^oy + (val % 2)*128

		local shifted = (val*256) / 2^oy
		poke(cam+i+ox+16, shifted / 256)
		poke(cam+i+ox, shifted % 256)
	end
	
	-- Draw to map
	if ox<8 and oy > 0 then tile(tx, ty, chr, fg, bg) end
	if ox>0 and oy > 0 then tile(tx+1, ty, chr+1, fg, bg) end
	if ox<8 and oy < 8 then tile(tx, ty+1, chr+2, fg, bg) end
	if ox>0 and oy < 8 then tile(tx+1, ty+1, chr+3, fg, bg) end
end

function int_btn(i)
	return btn(i) and 1 or 0
end

function del(t,e)
	for i,v in pairs(t) do
		if v==e then return rmv(t,i) end
	end
end

-- Shapes =============================
function Rect(x,y,w,h)
	return {x=x,y=y,w=w,h=h}
end

-- Math ===============================
function sgn(x) return x < 0 and -1 or 1 end
function sign(x) return x == 0 and 0 or sgn(x) end

function round(x) return flr(x + 0.5) end
function appr(x,y,d) return x < y and min(x+d, y) or max(x-d, y) end
function mid(v,x,y) return max(x, min(v,y)) end

-- Map ================================
function tilemap_get(tx,ty)
	return tilemap[tx + ty*128]
end
function mget(tx,ty)
	return peek(0xc00 + (tx + ty*16))
end

-- Font ===============================
function scroll_x(chr, ox, w)
	local offset = chr*8
	w = (w or 1)*8
	for i = 1,ox do
		local fin = peek(offset + w-1)
		for ii = w-1,1, -1 do
			poke(offset+ii, peek(offset+ii-1))
		end
		poke(offset, fin)
	end
end
function scroll_y(chr, oy)
	local offset = chr*8
	for i = 1,oy+6 do
		for ii = 0,7 do
			local val = peek(offset+ii)
			poke(offset+ii, (val/2) + ((val % 2)*128))
		end
	end
end

--!:font
